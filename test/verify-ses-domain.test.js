"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
const domain = 'example.org';
const hostedZoneId = '12345';
const zoneName = domain + '.';
lib_1.VerifySesDomain.prototype.getHostedZone = jest.fn().mockReturnValue({
    HostedZoneId: hostedZoneId,
    zoneName: zoneName
});
describe('SES domain verification', () => {
    it('ensure custom resource exists to initiate domain verification', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'TestStack');
        new lib_1.VerifySesDomain(stack, 'VerifyExampleDomain', {
            domainName: domain,
            addTxtRecord: false,
            addMxRecord: false,
            addDkimRecords: false
        });
        assert_1.expect(stack).to(assert_1.countResources('Custom::AWS', 3));
        assert_1.expect(stack).to(assert_1.haveResourceLike('Custom::AWS', {
            Create: {
                service: 'SES',
                action: 'verifyDomainIdentity',
                parameters: {
                    Domain: domain
                }
            },
            Delete: {
                service: 'SES',
                action: 'deleteIdentity',
                parameters: {
                    Identity: domain
                }
            }
        }));
        assert_1.expect(stack).to(assert_1.countResources('AWS::SNS::Topic', 1));
        assert_1.expect(stack).to(assert_1.countResources('AWS::Route53::RecordSet', 0));
    });
    it('ensure txt record is added', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'TestStack');
        const domain = 'example.org';
        new lib_1.VerifySesDomain(stack, 'VerifyExampleDomain', {
            domainName: domain,
            addTxtRecord: true,
            addMxRecord: false,
            addDkimRecords: false
        });
        assert_1.expect(stack).to(assert_1.countResources('Custom::AWS', 3));
        assert_1.expect(stack).to(assert_1.countResources('AWS::SNS::Topic', 1));
        assert_1.expect(stack).to(assert_1.countResources('AWS::Route53::RecordSet', 1));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Route53::RecordSet', {
            Type: 'TXT',
            Name: '_amazonses.' + zoneName
        }));
    });
    it('ensure mx record is added', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'TestStack');
        const domain = 'example.org';
        new lib_1.VerifySesDomain(stack, 'VerifyExampleDomain', {
            domainName: domain,
            addTxtRecord: false,
            addMxRecord: true,
            addDkimRecords: false
        });
        assert_1.expect(stack).to(assert_1.countResources('Custom::AWS', 3));
        assert_1.expect(stack).to(assert_1.countResources('AWS::SNS::Topic', 1));
        assert_1.expect(stack).to(assert_1.countResources('AWS::Route53::RecordSet', 1));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Route53::RecordSet', {
            Type: 'MX',
            Name: zoneName
        }));
    });
    it('ensure dkim records are added', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'TestStack');
        const domain = 'example.org';
        new lib_1.VerifySesDomain(stack, 'VerifyExampleDomain', {
            domainName: domain,
            addTxtRecord: false,
            addMxRecord: false,
            addDkimRecords: true
        });
        assert_1.expect(stack).to(assert_1.countResources('Custom::AWS', 4));
        assert_1.expect(stack).to(assert_1.countResources('AWS::SNS::Topic', 1));
        assert_1.expect(stack).to(assert_1.countResources('AWS::Route53::RecordSet', 3));
        const c = assert_1.Capture.anyType();
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Route53::RecordSet', {
            Type: 'CNAME',
            Name: {
                'Fn::Join': ['', c.capture()]
            }
        }));
        expect(c.capturedValue).toContain('._domainkey.' + zoneName);
    });
    it('ensure custom topic is used', () => {
        // TODO: write test
    });
});
//# sourceMappingURL=data:application/json;base64,